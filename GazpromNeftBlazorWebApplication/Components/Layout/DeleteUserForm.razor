@using AutoMapper
@using GazpromNeftBlazorWebApplication.DTO
@using GazpromNeftBlazorWebApplication.Exceptions
@using GazpromNeftBlazorWebApplication.Services
@using GazpromNeftBlazorWebApplication.ViewModels
<div class="fields-enter-component__container">
    <EditForm Model="_model" OnValidSubmit="SubmitForm">
        <div class="fields-enter-component__buttons-container">
            <div class="fields-enter-component__button-container">
                <button type="submit" class="btn btn-danger">Удалить</button>
            </div>
            <div class="fields-enter-component__button-container">
                <button type="button" @onclick="Cancel" class="btn btn-success">Отмена</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Inject]
    public required IMapper Mapper { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    [Parameter]
    public required IndexUserModel UserModel { get; set; }
    private DeleteUserModel _model = new();
    [Inject]
    public required ApiService ApiService { get; set; }
    [Inject] public required ApiEndpointManagerService ApiEndpoints { get; set; }

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    private List<ValidationErrorDto> _errors = new List<ValidationErrorDto>();

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(BlazoredModal.Title)) 
            BlazoredModal.SetTitle("Редактирование пользователя");
        _model = Mapper.Map<IndexUserModel, DeleteUserModel>(UserModel);
    }

    private async Task SubmitForm()
    {
        if (await DeleteUser())
        {
            await BlazoredModal.CloseAsync(ModalResult.Ok(_model.Id));
        }
    }
    private async Task Cancel() => await BlazoredModal.CancelAsync();

    private async Task<bool> DeleteUser()
    {
        var uri = ApiEndpoints.GetEndpointUrl("User");
        var dto = Mapper.Map<DeleteUserModel, DeleteUserCommand>(_model);
        try
        {
            await ApiService.Delete<DeleteUserCommand>(uri, dto);
            return true;
        }
        catch (InternalServerErrorException ex)
        {
            Console.WriteLine(ex);
            var errorModal = Modal.Show<ErrorModal>("Произошла внутренняя ошибка сервера");
            var result = await errorModal.Result;
            if (result.Confirmed || result.Cancelled)
            {
                await BlazoredModal.CloseAsync(ModalResult.Ok());
            }
            return false;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine(ex);
            var errorModal = Modal.Show<ErrorModal>("Произошла ошибка во время выполнения HTTP-запроса");
            var result = await errorModal.Result;
            if (result.Confirmed || result.Cancelled)
            {
                await BlazoredModal.CloseAsync(ModalResult.Ok());
            }
            return false;
        }

    }
}
